

{
  "entities": {
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user of the MemoDams application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the user.",
          "format": "uuid"
        },
        "email": {
          "type": "string",
          "description": "Email address of the user.",
          "format": "email"
        },
        "name": {
          "type": "string",
          "description": "Full name of the user."
        },
        "bio": {
          "type": "string",
          "description": "Short biography or description of the user."
        },
        "profilePictureUrl": {
          "type": "string",
          "description": "URL of the user's profile picture.",
          "format": "uri"
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp indicating when the user account was created.",
          "format": "date-time"
        },
        "birthday": {
          "type": "string",
          "description": "User's birthday.",
          "format": "date"
        },
        "phoneNumber": {
            "type": "string",
            "description": "User's phone number for custom account verification."
        }
      },
      "required": [
        "id",
        "email",
        "name",
        "createdAt"
      ]
    },
    "Note": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Note",
      "type": "object",
      "description": "Represents a note created by a user.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the note."
        },
        "userId": {
          "type": "string",
          "description": "Reference to the User who created the note. (Relationship: User 1:N Note)"
        },
        "title": {
          "type": "string",
          "description": "Title of the note."
        },
        "content": {
          "type": "string",
          "description": "Content of the note (rich text or markdown)."
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp indicating when the note was created.",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "description": "Timestamp indicating when the note was last updated.",
          "format": "date-time"
        },
        "tagIds": {
          "type": "array",
          "description": "References to Tags associated with the note. (Relationship: Tag N:N Note)",
          "items": {
            "type": "string"
          }
        },
        "sharedId": {
            "type": "string",
            "description": "The ID of the corresponding document in the `sharedNotes` collection if the note is public."
        }
      },
      "required": [
        "id",
        "userId",
        "title",
        "content",
        "createdAt",
        "updatedAt"
      ]
    },
    "SharedNote": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Shared Note",
      "type": "object",
      "description": "A public, read-only copy of a user's note.",
      "properties": {
        "originalNoteId": { "type": "string" },
        "originalUserId": { "type": "string" },
        "authorName": { "type": "string" },
        "title": { "type": "string" },
        "content": { "type": "string" },
        "createdAt": { "type": "string", "format": "date-time" },
        "updatedAt": { "type": "string", "format": "date-time" }
      }
    },
    "Tag": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Tag",
      "type": "object",
      "description": "Represents a tag or category for notes.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the tag."
        },
        "userId": {
          "type": "string",
          "description": "Reference to the User who created the tag. (Relationship: User 1:N Tag)"
        },
        "name": {
          "type": "string",
          "description": "Name of the tag."
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp indicating when the tag was created.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "userId",
        "name",
        "createdAt"
      ]
    },
    "File": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "File",
      "type": "object",
      "description": "Represents a file uploaded by a user.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the file."
        },
        "userId": {
          "type": "string",
          "description": "Reference to the User who uploaded the file. (Relationship: User 1:N File)"
        },
        "name": {
          "type": "string",
          "description": "Original name of the file."
        },
        "url": {
          "type": "string",
          "description": "URL of the file stored in Firebase Storage.",
          "format": "uri"
        },
        "uploadDate": {
          "type": "string",
          "description": "Timestamp indicating when the file was uploaded.",
          "format": "date-time"
        },
        "fileType": {
          "type": "string",
          "description": "MIME type of the file."
        },
        "fileSize": {
          "type": "number",
          "description": "Size of the file in bytes."
        }
      },
      "required": [
        "id",
        "userId",
        "name",
        "url",
        "uploadDate"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous",
      "google.com"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Stores user profile information. The 'userId' parameter corresponds to the Firebase Auth UID.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user, matching their Firebase Auth UID."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/notes/{noteId}",
        "definition": {
          "entityName": "Note",
          "schema": {
            "$ref": "#/backend/entities/Note"
          },
          "description": "Stores notes created by a specific user. The 'userId' path parameter ensures that only the authenticated user can access their own notes.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user, matching their Firebase Auth UID."
            },
            {
              "name": "noteId",
              "description": "The unique identifier for the note."
            }
          ]
        }
      },
       {
        "path": "/sharedNotes/{noteId}",
        "definition": {
          "entityName": "SharedNote",
          "schema": { "$ref": "#/backend/entities/SharedNote" },
          "description": "Stores public, read-only copies of notes. Anyone can read these documents, but only the server can write to them.",
           "params": [
            {
              "name": "noteId",
              "description": "The unique identifier for the shared note."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/tags/{tagId}",
        "definition": {
          "entityName": "Tag",
          "schema": {
            "$ref": "#/backend/entities/Tag"
          },
          "description": "Stores tags created by a specific user. The 'userId' path parameter ensures that only the authenticated user can access their own tags.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user, matching their Firebase Auth UID."
            },
            {
              "name": "tagId",
              "description": "The unique identifier for the tag."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/files/{fileId}",
        "definition": {
          "entityName": "File",
          "schema": {
            "$ref": "#/backend/entities/File"
          },
          "description": "Stores files uploaded by a specific user. The 'userId' path parameter ensures that only the authenticated user can access their own files.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user, matching their Firebase Auth UID."
            },
            {
              "name": "fileId",
              "description": "The unique identifier for the file."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to ensure data isolation and security by leveraging path-based ownership and denormalization for authorization independence. Each user's data (notes, tags, files) is stored under their unique user ID, enabling simple and secure security rules. This design avoids complex `get()` calls in security rules, ensuring atomic operations and easier debugging.  Specifically:\n\n*   **/users/{userId}**: Stores user profile information.\n*   **/users/{userId}/notes/{noteId}**: Stores notes created by a specific user.\n*   **/users/{userId}/tags/{tagId}**: Stores tags created by a specific user.\n*   **/users/{userId}/files/{fileId}**: Stores files uploaded by a specific user.\n\nThis structure supports secure list operations (QAPs) by ensuring that each collection contains documents with the same security posture: only the user identified by `{userId}` can access the data within that branch. There's no need to filter based on user ID within the rules, as the path inherently defines ownership.  Authorization Independence is achieved because rules only need to validate `request.auth.uid` against the `{userId}` path parameter; no parent document reads are necessary."
  }
}
