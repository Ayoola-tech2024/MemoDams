/**
 * @fileOverview
 * This ruleset enforces a strict user-ownership model for all data stored in Firestore.
 * All data is nested under /users/{userId}, ensuring that only the authenticated user
 * with a matching UID can access their own data.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information. The userId must match the authenticated user's UID.
 * - /users/{userId}/notes/{noteId}: Stores notes created by a specific user.
 * - /sharedNotes/{noteId}: Public read-only copies of notes.
 * - /users/{userId}/tags/{tagId}: Stores tags created by a specific user.
 * - /users/{userId}/files/{fileId}: Stores files uploaded by a specific user.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Shared notes are readable by anyone, writable by the server.
 * - All write operations require a verified user identity (request.auth != null).
 * - Data validation is limited to relational integrity (e.g., userId in the path matching the userId in the document).
 *
 * Denormalization for Authorization:
 * - The `userId` is embedded in the path for all user-owned documents, avoiding the need for `get()` calls to verify ownership.
 *
 * Structural Segregation:
 * - Public shared notes are stored in a separate top-level collection `/sharedNotes`, while private notes are stored under `/users/{userId}/notes/{noteId}`.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces owner-only access to user profiles. Only the authenticated user with a matching UID can read or write their own profile.
     * @path /users/{userId}
     * @allow (create) - Authenticated user creates their own profile with a matching userId.
     * @allow (get) - Authenticated user reads their own profile with a matching userId.
     * @allow (update) - Authenticated user updates their own profile with a matching userId.
     * @allow (delete) - Authenticated user deletes their own profile with a matching userId.
     * @deny (create) - Authenticated user attempts to create a profile with a mismatched userId.
     * @deny (get) - Authenticated user attempts to read another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // User listing is not allowed.
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces owner-only access to notes. Only the authenticated user with a matching UID can read or write their own notes.
     * @path /users/{userId}/notes/{noteId}
     * @allow (create) - Authenticated user creates a note under their own userId.
     * @allow (get) - Authenticated user reads a note under their own userId.
     * @allow (update) - Authenticated user updates a note under their own userId.
     * @allow (delete) - Authenticated user deletes a note under their own userId.
     * @deny (create) - Authenticated user attempts to create a note under another user's userId.
     * @deny (get) - Authenticated user attempts to read a note under another user's userId.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/notes/{noteId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to shared notes, but restricts write access to the server.
     * @path /sharedNotes/{noteId}
     * @allow (get) - Any user (or no user) can read a shared note.
     * @deny (create) - No client-side creation of shared notes.
     * @deny (update) - No client-side updates of shared notes.
     * @deny (delete) - No client-side deletion of shared notes.
     * @principle Public read, restricted write access.
     */
    match /sharedNotes/{noteId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Enforces owner-only access to tags. Only the authenticated user with a matching UID can read or write their own tags.
     * @path /users/{userId}/tags/{tagId}
     * @allow (create) - Authenticated user creates a tag under their own userId.
     * @allow (get) - Authenticated user reads a tag under their own userId.
     * @allow (update) - Authenticated user updates a tag under their own userId.
     * @allow (delete) - Authenticated user deletes a tag under their own userId.
     * @deny (create) - Authenticated user attempts to create a tag under another user's userId.
     * @deny (get) - Authenticated user attempts to read a tag under another user's userId.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/tags/{tagId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces owner-only access to files. Only the authenticated user with a matching UID can read or write their own files.
     * @path /users/{userId}/files/{fileId}
     * @allow (create) - Authenticated user creates a file under their own userId.
     * @allow (get) - Authenticated user reads a file under their own userId.
     * @allow (update) - Authenticated user updates a file under their own userId.
     * @allow (delete) - Authenticated user deletes a file under their own userId.
     * @deny (create) - Authenticated user attempts to create a file under another user's userId.
     * @deny (get) - Authenticated user attempts to read a file under another user's userId.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/files/{fileId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}