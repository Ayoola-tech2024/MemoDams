/**
 * @fileOverview Firestore Security Rules for MemoDams application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model, where users can only
 * access their own data. All data is nested under /users/{userId}, ensuring
 * strong data isolation. Admin privileges, managed via custom claims,
 * bypass these ownership restrictions.
 *
 * Data Structure:
 * - /users/{userId}: User profile information.
 * - /users/{userId}/notes/{noteId}: Notes created by a specific user.
 * - /users/{userId}/tags/{tagId}: Tags created by a specific user.
 * - /users/{userId}/files/{fileId}: Files uploaded by a specific user.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect user privacy.
 * - The rules explicitly deny any write operation with `if false;` if
 *   the user is not authorized, ensuring no accidental data modification.
 * - Data validation is relaxed to allow for rapid prototyping and iteration.
 *   Only the fields crucial for authorization and relational integrity are validated.
 * - Roles are managed using custom claims.
 *
 * Denormalization for Authorization:
 * The `/users/{userId}` path inherently links documents to their owner,
 * eliminating the need for additional `get()` calls or complex queries.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects the /users collection. Only admins can read and write user profiles.
     * @path /users/{userId}
     * @allow (get, list) if request.auth.token.admin == true;
     * @allow (create, update, delete) if request.auth.token.admin == true;
     * @deny (get, list) if request.auth.token.admin != true;
     * @deny (create, update, delete) if request.auth.token.admin != true;
     * @principle Enforces admin-only access to user profiles.
     */
    match /users/{userId} {
      allow get, list: if isAdmin();
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Protects the /users/{userId}/notes collection. Allows a user to manage their own notes.
     * @path /users/{userId}/notes/{noteId}
     * @allow (create, get, list, update, delete) if request.auth.uid == userId;
     * @deny (create, update, delete) if request.auth.uid != userId;
     * @principle Enforces document ownership for notes based on the user ID in the path.
     */
    match /users/{userId}/notes/{noteId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Protects the /users/{userId}/tags collection. Allows a user to manage their own tags.
     * @path /users/{userId}/tags/{tagId}
     * @allow (create, get, list, update, delete) if request.auth.uid == userId;
     * @deny (create, update, delete) if request.auth.uid != userId;
     * @principle Enforces document ownership for tags based on the user ID in the path.
     */
    match /users/{userId}/tags/{tagId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Protects the /users/{userId}/files collection. Allows a user to manage their own files.
     * @path /users/{userId}/files/{fileId}
     * @allow (create, get, list, update, delete) if request.auth.uid == userId;
     * @deny (create, update, delete) if request.auth.uid != userId;
     * @principle Enforces document ownership for files based on the user ID in the path.
     */
    match /users/{userId}/files/{fileId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    function isAdmin() {
      return isSignedIn() && request.auth.token.admin == true;
    }
  }
}