/**
 * @fileOverview Firestore Security Rules for MemoDams application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. Each user has full control over their own data (notes, tags, files) stored under their respective user ID. No cross-user access is permitted except when explicitly granted through shared access patterns (not currently implemented).
 *
 * Data Structure:
 * All data is nested under /users/{userId}, ensuring that data is isolated by user.  Each user's profile information is stored directly at /users/{userId}, and their associated notes, tags, and files are stored in subcollections under that path.
 *
 * Key Security Decisions:
 * - Users can only access their own data.
 * - Listing all users is explicitly denied to protect user privacy.
 * - The rules are designed to avoid `get()` calls for authorization by relying on path-based ownership.
 *
 * Denormalization for Authorization:
 * The data model uses path-based ownership (`/users/{userId}/...`) to implicitly associate data with a specific user.  This eliminates the need to store redundant `userId` fields within documents, simplifying the rules and improving performance.
 *
 * Structural Segregation:
 * All private user data is stored under the `/users/{userId}` path.  There is currently no public data in this model.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces access control for user profile information.
     * @path /users/{userId}
     * @allow (create) - Authenticated user with matching UID can create their own profile.
     * @allow (get, update, delete) - Authenticated user with matching UID can read, update, and delete their own profile.
     * @deny (create) - Unauthenticated users or users with mismatched UIDs cannot create profiles.
     * @deny (get, update, delete) - Unauthenticated users or users with mismatched UIDs cannot read, update, or delete profiles.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Do not allow listing all users
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces access control for notes created by a specific user.
     * @path /users/{userId}/notes/{noteId}
     * @allow (create) - Authenticated user with matching UID can create notes under their profile.
     * @allow (get, update, delete) - Authenticated user with matching UID can read, update, and delete their own notes.
     * @allow (list) - Authenticated user with matching UID can list their own notes.
     * @deny (create) - Unauthenticated users or users with mismatched UIDs cannot create notes.
     * @deny (get, update, delete) - Unauthenticated users or users with mismatched UIDs cannot read, update, or delete notes.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/notes/{noteId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces access control for tags created by a specific user.
     * @path /users/{userId}/tags/{tagId}
     * @allow (create) - Authenticated user with matching UID can create tags under their profile.
     * @allow (get, update, delete) - Authenticated user with matching UID can read, update, and delete their own tags.
     * @allow (list) - Authenticated user with matching UID can list their own tags.
     * @deny (create) - Unauthenticated users or users with mismatched UIDs cannot create tags.
     * @deny (get, update, delete) - Unauthenticated users or users with mismatched UIDs cannot read, update, or delete tags.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/tags/{tagId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces access control for files uploaded by a specific user.
     * @path /users/{userId}/files/{fileId}
     * @allow (create) - Authenticated user with matching UID can upload files under their profile.
     * @allow (get, update, delete) - Authenticated user with matching UID can read, update, and delete their own files.
     * @allow (list) - Authenticated user with matching UID can list their own files.
     * @deny (create) - Unauthenticated users or users with mismatched UIDs cannot upload files.
     * @deny (get, update, delete) - Unauthenticated users or users with mismatched UIDs cannot read, update, or delete files.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/files/{fileId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}