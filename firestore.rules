/**
 * @file Firestore Security Rules
 * @core_philosophy This ruleset enforces a strict user-ownership model.  Each user has full control over their own data tree, and no access to other users' data. Data validation is relaxed to allow for rapid prototyping.
 * @data_structure All data is nested under /users/{userId}, ensuring data isolation.
 * @key_security_decisions
 *   - Users cannot list all user profiles (the /users collection itself).
 *   - All write operations are restricted to the authenticated user's data tree.
 *   - Data validation is minimal in this prototype phase, focusing on relational integrity and ownership.
 *   - Authorization is independent because rules only validate `request.auth.uid` against the `{userId}` path parameter; no parent document reads are necessary.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects the /users collection and grants access only to specific user's document
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their profile.
     * @deny (create) User with ID 'user123' cannot create profile for 'user456'.
     * @allow (get) User with ID 'user123' can read their profile.
     * @deny (get) User with ID 'user123' cannot read profile for 'user456'.
     * @allow (update) User with ID 'user123' can update their profile.
     * @deny (update) User with ID 'user123' cannot update profile for 'user456'.
     * @allow (delete) User with ID 'user123' can delete their profile.
     * @deny (delete) User with ID 'user123' cannot delete profile for 'user456'.
     * @principle Enforces user-ownership for all operations on user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Users should not be able to list all user documents.
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    
      /**
       * @description Manages notes for a specific user. Only the user can create, read, update, and delete their own notes.
       * @path /users/{userId}/notes/{noteId}
       * @allow (create) User with ID 'user123' can create a note in their notes collection.
       * @deny (create) User with ID 'user123' cannot create a note in 'user456' notes collection.
       * @allow (get) User with ID 'user123' can read a note in their notes collection.
       * @deny (get) User with ID 'user123' cannot read a note in 'user456' notes collection.
       * @allow (update) User with ID 'user123' can update a note in their notes collection.
       * @deny (update) User with ID 'user123' cannot update a note in 'user456' notes collection.
       * @allow (delete) User with ID 'user123' can delete a note in their notes collection.
       * @deny (delete) User with ID 'user123' cannot delete a note in 'user456' notes collection.
       * @principle Enforces user-ownership for all operations on notes.
       */
      match /notes/{noteId} {
        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId) && request.resource.data.userId == userId;
        allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
        allow delete: if isExistingOwner(userId);
      }

      /**
       * @description Manages tags for a specific user. Only the user can create, read, update, and delete their own tags.
       * @path /users/{userId}/tags/{tagId}
       * @allow (create) User with ID 'user123' can create a tag in their tags collection.
       * @deny (create) User with ID 'user123' cannot create a tag in 'user456' tags collection.
       * @allow (get) User with ID 'user123' can read a tag in their tags collection.
       * @deny (get) User with ID 'user123' cannot read a tag in 'user456' tags collection.
       * @allow (update) User with ID 'user123' can update a tag in their tags collection.
       * @deny (update) User with ID 'user123' cannot update a tag in 'user456' tags collection.
       * @allow (delete) User with ID 'user123' can delete a tag in their tags collection.
       * @deny (delete) User with ID 'user123' cannot delete a tag in 'user456' tags collection.
       * @principle Enforces user-ownership for all operations on tags.
       */
      match /tags/{tagId} {
        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId) && request.resource.data.userId == userId;
        allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
        allow delete: if isExistingOwner(userId);
      }

      /**
       * @description Manages files for a specific user. Only the user can create, read, update, and delete their own files.
       * @path /users/{userId}/files/{fileId}
       * @allow (create) User with ID 'user123' can create a file in their files collection.
       * @deny (create) User with ID 'user123' cannot create a file in 'user456' files collection.
       * @allow (get) User with ID 'user123' can read a file in their files collection.
       * @deny (get) User with ID 'user123' cannot read a file in 'user456' files collection.
       * @allow (update) User with ID 'user123' can update a file in their files collection.
       * @deny (update) User with ID 'user123' cannot update a file in 'user456' files collection.
       * @allow (delete) User with ID 'user123' can delete a file in their files collection.
       * @deny (delete) User with ID 'user123' cannot delete a file in 'user456' files collection.
       * @principle Enforces user-ownership for all operations on files.
       */
      match /files/{fileId} {
        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId) && request.resource.data.userId == userId;
        allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
        allow delete: if isExistingOwner(userId);
      }
    }
  }
}

/**
 * @function isSignedIn
 * @description Checks if the user is signed in.
 * @return {boolean} True if the user is signed in, false otherwise.
 */
function isSignedIn() {
  return request.auth != null;
}

/**
 * @function isOwner
 * @description Checks if the requesting user is the owner of the resource.
 * @param {string} userId - The user ID of the resource owner.
 * @return {boolean} True if the user is the owner, false otherwise.
 */
function isOwner(userId) {
  return isSignedIn() && request.auth.uid == userId;
}

/**
 * @function isExistingOwner
 * @description Checks if the requesting user is the owner of the resource and if the resource exists.
 * @param {string} userId - The user ID of the resource owner.
 * @return {boolean} True if the user is the owner and the resource exists, false otherwise.
 */
function isExistingOwner(userId) {
  return isOwner(userId) && resource != null;
}