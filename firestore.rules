/**
 * @fileoverview Firestore Security Rules for MemoDams application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for personal data (notes, tags, files),
 * and a shared access model for conversations and messages.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, accessible only to the owner.
 * - /users/{userId}/notes/{noteId}: Notes owned by the user.
 * - /users/{userId}/tags/{tagId}: Tags owned by the user.
 * - /users/{userId}/files/{fileId}: Files owned by the user.
 * - /conversations/{conversationId}: Conversations with multiple participants.
 * - /conversations/{conversationId}/messages/{messageId}: Messages within conversations.
 *
 * Key Security Decisions:
 * - Users can only access their own profile data.
 * - Users can only create, read, update, and delete their own notes, tags, and files.
 * - Conversations are accessible to participants.
 * - Messages are accessible to participants of the parent conversation.
 * - Listing of user subcollections (notes, tags, files, conversations) is allowed only to the owner.
 *
 * Denormalization for Authorization:
 * - Conversations: `participantIds` array on each conversation document is used to authorize access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (create) User with matching ID can create their profile.
     * @allow (get, update, delete) User with matching ID can read, update, or delete their profile.
     * @deny (create) User cannot create a profile with an ID that doesn't match their own.
     * @deny (get, update, delete) User cannot read, update, or delete another user's profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      // Helper function to check if the user is signed in and the requested user ID matches the authenticated user ID.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Allow a user to create their own profile, but only if the userId matches their auth.uid.
      allow create: if isOwner(userId);
      // Allow a user to get their own profile.
      allow get: if isOwner(userId);
      // Allow a user to update their own profile.
      allow update: if isOwner(userId); //Ensure immutability of user id.
      // Allow a user to delete their own profile.
      allow delete: if isOwner(userId);
      // Prevent listing all users.
      allow list: if false;
    }

    /**
     * @description Controls access to notes within a user's profile.
     * @path /users/{userId}/notes/{noteId}
     * @allow (create) User with matching ID can create notes.
     * @allow (get, list, update, delete) User with matching ID can read, list, update, or delete their own notes.
     * @deny (create) User cannot create a note with a userId that doesn't match their own.
     * @deny (get, list, update, delete) User cannot read, list, update, or delete another user's notes.
     * @principle Enforces document ownership for notes.
     */
    match /users/{userId}/notes/{noteId} {
      // Helper function to check if the user is signed in and the requested user ID matches the authenticated user ID.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow create: if isOwner(userId);
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow update: if isOwner(userId); //Ensure immutability of user id.
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to tags within a user's profile.
     * @path /users/{userId}/tags/{tagId}
     * @allow (create) User with matching ID can create tags.
     * @allow (get, list, update, delete) User with matching ID can read, list, update, or delete their own tags.
     * @deny (create) User cannot create a tag with a userId that doesn't match their own.
     * @deny (get, list, update, delete) User cannot read, list, update, or delete another user's tags.
     * @principle Enforces document ownership for tags.
     */
    match /users/{userId}/tags/{tagId} {
      // Helper function to check if the user is signed in and the requested user ID matches the authenticated user ID.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow create: if isOwner(userId);
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow update: if isOwner(userId); //Ensure immutability of user id.
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to files within a user's profile.
     * @path /users/{userId}/files/{fileId}
     * @allow (create) User with matching ID can create files.
     * @allow (get, list, update, delete) User with matching ID can read, list, update, or delete their own files.
     * @deny (create) User cannot create a file with a userId that doesn't match their own.
     * @deny (get, list, update, or delete) User cannot read, list, update, or delete another user's files.
     * @principle Enforces document ownership for files.
     */
    match /users/{userId}/files/{fileId} {
      // Helper function to check if the user is signed in and the requested user ID matches the authenticated user ID.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow create: if isOwner(userId);
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow update: if isOwner(userId); //Ensure immutability of user id.
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to conversations.
     * @path /conversations/{conversationId}
     * @allow (get, list) Any participant can read and list the conversation.
     * @allow (create) Any authenticated user can create a conversation.
     * @allow (update) Only participants can update the conversation.
     * @allow (delete) No one can delete a conversation.
     * @principle Enforces shared access for conversations based on participant list.
     */
    match /conversations/{conversationId} {
      allow get: if request.auth != null && request.auth.uid in resource.data.participantIds;
      allow list: if request.auth != null && request.auth.uid in resource.data.participantIds;
      allow create: if request.auth != null && request.resource.data.participantIds is list && request.auth.uid in request.resource.data.participantIds;
      allow update: if request.auth != null && request.auth.uid in resource.data.participantIds;
      allow delete: if false;
    }

    /**
     * @description Controls access to messages within a conversation.
     * @path /conversations/{conversationId}/messages/{messageId}
     * @allow (get, list) Any participant in the conversation can read the messages.
     * @allow (create) Any participant can create a message in the conversation.
     * @allow (update, delete) No one can update or delete a message.
     * @principle Enforces shared access for messages based on conversation participant list.
     */
    match /conversations/{conversationId}/messages/{messageId} {
      function isParticipant(conversationId) {
        return request.auth != null
            && request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participantIds;
      }

      allow get: if isParticipant(conversationId);
      allow list: if isParticipant(conversationId);
      allow create: if isParticipant(conversationId);
      allow update: if false;
      allow delete: if false;
    }
  }
}