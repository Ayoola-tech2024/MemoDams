/**
 * @fileoverview Firestore Security Rules for MemoDams application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. Each user has exclusive
 * access to their own data, including notes, tags, and files.
 *
 * Data Structure:
 * Data is organized under the `/users/{userId}` path, where `{userId}`
 * corresponds to the Firebase Auth UID. Notes, tags, and files are stored
 * as subcollections under each user's document. Shared notes are stored under `/sharedNotes/{noteId}`.
 *
 * Key Security Decisions:
 * - Users can only access their own data.
 * - Listing operations are restricted to the owner of the data.
 * - The `sharedNotes` collection is publicly readable, but only writable by the server.
 *
 * Denormalization for Authorization:
 * - The `userId` is embedded in the path for notes, tags, and files, which avoids
 *   the need for `get()` calls to verify ownership. The rule checks `request.auth.uid` against the `{userId}` path parameter.
 *
 * Structural Segregation:
 * - Publicly shared notes are stored in a separate `/sharedNotes` collection to
 *   avoid mixing public and private data within the user's private data tree.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Defines the `isSignedIn()` helper function.
     * @principle Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Defines the `isOwner(userId)` helper function.
     * @principle Checks if the request is made by the owner of the resource.
     * @param {string} userId - The user ID to check against the request's auth UID.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Defines the `isExistingOwner(userId)` helper function.
     * @principle Checks if the request is made by the owner of an existing resource.
     * @param {string} userId - The user ID to check against the resource data and the request's auth UID.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Security rules for user profile documents.
     * @path /users/{userId}
     * @allow (create) User with UID 'user_abc' can create their profile.
     * @allow (get) User with UID 'user_abc' can read their profile.
     * @allow (update) User with UID 'user_abc' can update their profile.
     * @allow (delete) User with UID 'user_abc' can delete their profile.
     * @deny (create) User with UID 'user_xyz' cannot create a profile for 'user_abc'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // User listing is not permitted

      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Security rules for notes belonging to a user.
     * @path /users/{userId}/notes/{noteId}
     * @allow (create) User with UID 'user_abc' can create a note under their profile.
     * @allow (get) User with UID 'user_abc' can read a note under their profile.
     * @allow (update) User with UID 'user_abc' can update a note under their profile.
     * @allow (delete) User with UID 'user_abc' can delete a note under their profile.
     * @deny (create) User with UID 'user_xyz' cannot create a note under 'user_abc' profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/notes/{noteId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

     /**
      * @description Security rules for shared notes. Anyone can read, but only the server can write.
      * @path /sharedNotes/{noteId}
      * @allow (get) Any user can read a shared note.
      * @deny (create, update, delete) Only the server can modify shared notes.
      * @principle Public read, server-only write.
      */
     match /sharedNotes/{noteId} {
        allow get: if true; // Public read
        allow list: if true; // Public read
        allow create: if false; // Server-side only
        allow update: if false; // Server-side only
        allow delete: if false; // Server-side only
     }

    /**
     * @description Security rules for tags belonging to a user.
     * @path /users/{userId}/tags/{tagId}
     * @allow (create) User with UID 'user_abc' can create a tag under their profile.
     * @allow (get) User with UID 'user_abc' can read a tag under their profile.
     * @allow (update) User with UID 'user_abc' can update a tag under their profile.
     * @allow (delete) User with UID 'user_abc' can delete a tag under their profile.
     * @deny (create) User with UID 'user_xyz' cannot create a tag under 'user_abc' profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/tags/{tagId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Security rules for files belonging to a user.
     * @path /users/{userId}/files/{fileId}
     * @allow (create) User with UID 'user_abc' can create a file under their profile.
     * @allow (get) User with UID 'user_abc' can read a file under their profile.
     * @allow (update) User with UID 'user_abc' can update a file under their profile.
     * @allow (delete) User with UID 'user_abc' can delete a file under their profile.
     * @deny (create) User with UID 'user_xyz' cannot create a file under 'user_abc' profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/files/{fileId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }
  }
}