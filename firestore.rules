/**
 * @fileOverview Firestore Security Rules for MemoDams application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. Each user has full control over their own data,
 * and no access to other users' data, except for an admin user `damisileayoola@gmail.com` who can view user profiles.
 *
 * Data Structure:
 * All user-related data (notes, tags, files) is nested under `/users/{userId}`, ensuring that each user's data
 * is isolated and access can be controlled using path-based rules.  User profiles are stored at `/users/{userId}`.
 *
 * Key Security Decisions:
 * - User listing is explicitly denied for non-admins. Only the admin can see all user profiles.
 * - All write operations are restricted to the owner of the data, verified by comparing the requested UID
 *   with the `userId` path parameter.
 * - No data shape validation is performed beyond what's necessary for authorization (e.g., checking the
 *   `userId` field on creation).
 * - The admin is identified by a specific email address.
 *
 * Denormalization for Authorization:
 * The Firestore structure itself denormalizes ownership by nesting all user-specific data under the
 * `/users/{userId}` path. This avoids the need for `get()` calls to determine ownership.
 *
 * Structural Segregation:
 * All user-specific data is stored under the `/users/{userId}` path, ensuring clear separation between
 * different users' data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by the admin user.
     * @returns {boolean} True if the request is made by the admin, false otherwise.
     */
    function isAdmin() {
      return request.auth.token.email == "damisileayoola@gmail.com";
    }

    /**
     * @description Checks if the user is signed in.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @param {string} userId The user ID to compare against.
     * @returns {boolean} True if the user IDs match, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the existing owner of a document.
     * @param {string} userId The user ID to compare against.
     * @returns {boolean} True if the user IDs match and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Security rules for user profiles.
     * @path /users/{userId}
     * @allow (create) User 'user123' can create their profile if authenticated as 'user123'.
     * @allow (get) Admin can get any user profile
     * @deny (create) User 'user456' cannot create a profile with ID 'user123'.
     * @deny (update) User 'user456' cannot update profile with ID 'user123'.
     * @principle Enforces document ownership for writes, allows admin to read user profiles, and restricts listing to admin only.
     */
    match /users/{userId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Security rules for notes under a specific user.
     * @path /users/{userId}/notes/{noteId}
     * @allow (create) User 'user123' can create a note under their ID.
     * @deny (create) User 'user456' cannot create a note under user 'user123'.
     * @principle Enforces document ownership for writes and restricts access to a user's own notes.
     */
    match /users/{userId}/notes/{noteId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Security rules for tags under a specific user.
     * @path /users/{userId}/tags/{tagId}
     * @allow (create) User 'user123' can create a tag under their ID.
     * @deny (create) User 'user456' cannot create a tag under user 'user123'.
     * @principle Enforces document ownership for writes and restricts access to a user's own tags.
     */
    match /users/{userId}/tags/{tagId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Security rules for files under a specific user.
     * @path /users/{userId}/files/{fileId}
     * @allow (create) User 'user123' can create a file under their ID.
     * @deny (create) User 'user456' cannot create a file under user 'user123'.
     * @principle Enforces document ownership for writes and restricts access to a user's own files.
     */
    match /users/{userId}/files/{fileId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }
  }
}