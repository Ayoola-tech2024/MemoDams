/**
 * @fileOverview Firestore Security Rules for MemoDams application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. Each user has complete control over their own data,
 * and no access to other users' data.  Authorization decisions are based on the authenticated user's
 * UID matching the `userId` path parameter.
 *
 * Data Structure:
 * All user-specific data (notes, tags, files) is nested under `/users/{userId}`.
 * - `/users/{userId}`: User profile information.
 * - `/users/{userId}/notes/{noteId}`: Notes created by the user.
 * - `/users/{userId}/tags/{tagId}`: Tags created by the user.
 * - `/users/{userId}/files/{fileId}`: Files uploaded by the user.
 *
 * Key Security Decisions:
 * - Users can only access their own data. There is no shared access or admin roles.
 * - List operations are restricted to the owner of the data.
 * - Data validation is minimal during this prototyping phase, focusing on ownership and relational integrity.
 *
 * Denormalization for Authorization:
 * The data model relies on path-based ownership.  The `userId` path parameter inherently defines ownership,
 * eliminating the need for additional `get()` calls or document-level ownership fields. This results in
 * simpler and more performant security rules.
 *
 * Structural Segregation:
 * All user-specific data is stored under the `/users/{userId}` path, ensuring complete segregation of data
 * between users. This structure simplifies security rules and prevents accidental data leakage.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure access to user profiles.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their profile.
     * @deny (create) User with UID 'user456' cannot create a profile for 'user123'.
     * @allow (get) User with UID 'user123' can retrieve their profile.
     * @deny (get) User with UID 'user456' cannot retrieve the profile of 'user123'.
     * @allow (update) User with UID 'user123' can update their profile.
     * @deny (update) User with UID 'user456' cannot update the profile of 'user123'.
     * @allow (delete) User with UID 'user123' can delete their profile.
     * @deny (delete) User with UID 'user456' cannot delete the profile of 'user123'.
     * @principle Enforces document ownership for writes and reads.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure access to notes for a specific user.
     * @path /users/{userId}/notes/{noteId}
     * @allow (create) User with UID 'user123' can create a note.
     * @deny (create) User with UID 'user456' cannot create a note for 'user123'.
     * @allow (get) User with UID 'user123' can retrieve their note.
     * @deny (get) User with UID 'user456' cannot retrieve the note of 'user123'.
     * @allow (update) User with UID 'user123' can update their note.
     * @deny (update) User with UID 'user456' cannot update the note of 'user123'.
     * @allow (delete) User with UID 'user123' can delete their note.
     * @deny (delete) User with UID 'user456' cannot delete the note of 'user123'.
     * @principle Enforces document ownership for writes and reads.
     */
    match /users/{userId}/notes/{noteId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure access to tags for a specific user.
     * @path /users/{userId}/tags/{tagId}
     * @allow (create) User with UID 'user123' can create a tag.
     * @deny (create) User with UID 'user456' cannot create a tag for 'user123'.
     * @allow (get) User with UID 'user123' can retrieve their tag.
     * @deny (get) User with UID 'user456' cannot retrieve the tag of 'user123'.
     * @allow (update) User with UID 'user123' can update their tag.
     * @deny (update) User with UID 'user456' cannot update the tag of 'user123'.
     * @allow (delete) User with UID 'user123' can delete their tag.
     * @deny (delete) User with UID 'user456' cannot delete the tag of 'user123'.
     * @principle Enforces document ownership for writes and reads.
     */
    match /users/{userId}/tags/{tagId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
       function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure access to files for a specific user.
     * @path /users/{userId}/files/{fileId}
     * @allow (create) User with UID 'user123' can create a file.
     * @deny (create) User with UID 'user456' cannot create a file for 'user123'.
     * @allow (get) User with UID 'user123' can retrieve their file.
     * @deny (get) User with UID 'user456' cannot retrieve the file of 'user123'.
     * @allow (update) User with UID 'user123' can update their file.
     * @deny (update) User with UID 'user456' cannot update the file of 'user123'.
     * @allow (delete) User with UID 'user123' can delete their file.
     * @deny (delete) User with UID 'user456' cannot delete the file of 'user123'.
     * @principle Enforces document ownership for writes and reads.
     */
    match /users/{userId}/files/{fileId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
       function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}