
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users can read and write to their own user document.
    // This allows them to update their profile, bio, secret question, etc.
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;

      // Users can manage their own notes, files, and tags.
      match /notes/{noteId} {
        allow read, write, delete: if request.auth != null && request.auth.uid == userId;
      }
      match /files/{fileId} {
        allow read, write, delete: if request.auth != null && request.auth.uid == userId;
      }
      match /tags/{tagId} {
        allow read, write, delete: if request.auth != null && request.auth.uid == userId;
      }
      match /conversations/{conversationId} {
        allow read, write, delete: if request.auth != null && request.auth.uid == userId;
      }
    }

    // Rules for root collections
    
    // Anyone can read a shared note, but no one can write to it from the client.
    // Writes are handled by server-side logic (Admin SDK) which bypasses these rules.
    match /sharedNotes/{noteId} {
      allow read: if true;
      allow write: if false;
    }

    // Only authenticated users who are participants in a conversation can access it and its messages.
    match /conversations/{conversationId} {
      allow get: if request.auth != null && resource.data.participantIds.hasAny([request.auth.uid]);
      allow list, create, update: if request.auth != null; // More specific rules might be needed depending on creation logic

        match /messages/{messageId} {
            allow read, create: if request.auth != null && get(/databases/$(database)/documents/conversations/$(conversationId)).data.participantIds.hasAny([request.auth.uid]);
            allow update, delete: if false; // Messages are immutable
        }
    }

  }
}
