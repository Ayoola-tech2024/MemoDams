rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by an authenticated user.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Enforces identity verification.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the request is made by the owner of the resource.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Enforces identity verification.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the request is made by the owner of the resource and the resource exists.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Enforces resource existence for update and delete operations.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && exists(resource.path);
    }

    /**
     * @description Defines security rules for user profiles.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' creates their profile with matching ID.
     * @allow (get) - User with UID 'user123' reads their profile.
     * @allow (update) - User with UID 'user123' updates their profile.
     * @allow (delete) - User with UID 'user123' deletes their profile.
     * @deny (create) - User with UID 'user456' attempts to create a profile for 'user123'.
     * @deny (get) - User with UID 'user456' attempts to read profile 'user123'.
     * @principle Enforces document ownership for writes and restricts access to a user's own data.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Defines security rules for notes under a specific user.
     * @path /users/{userId}/notes/{noteId}
     * @allow (create) - User with UID 'user123' creates a note under their user ID.
     * @allow (get) - User with UID 'user123' reads a note under their user ID.
     * @allow (update) - User with UID 'user123' updates a note under their user ID.
     * @allow (delete) - User with UID 'user123' deletes a note under their user ID.
     * @deny (create) - User with UID 'user456' attempts to create a note under user ID 'user123'.
     * @deny (get) - User with UID 'user456' attempts to read a note under user ID 'user123'.
     * @principle Enforces document ownership for writes and restricts access to a user's own notes.
     */
    match /users/{userId}/notes/{noteId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

     /**
      * @description Defines security rules for shared notes.
      * @path /sharedNotes/{noteId}
      * @allow (get) - Any user can read a shared note.
      * @deny (create, update, delete) - No user can create, update, or delete a shared note directly.
      * @principle Grants public read access to shared notes while restricting write access.
      */
    match /sharedNotes/{noteId} {
        allow get: if true;
        allow list: if true;
        allow create: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
        allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
        allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Defines security rules for tags under a specific user.
     * @path /users/{userId}/tags/{tagId}
     * @allow (create) - User with UID 'user123' creates a tag under their user ID.
     * @allow (get) - User with UID 'user123' reads a tag under their user ID.
     * @allow (update) - User with UID 'user123' updates a tag under their user ID.
     * @allow (delete) - User with UID 'user123' deletes a tag under their user ID.
     * @deny (create) - User with UID 'user456' attempts to create a tag under user ID 'user123'.
     * @deny (get) - User with UID 'user456' attempts to read a tag under user ID 'user123'.
     * @principle Enforces document ownership for writes and restricts access to a user's own tags.
     */
    match /users/{userId}/tags/{tagId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Defines security rules for files under a specific user.
     * @path /users/{userId}/files/{fileId}
     * @allow (create) - User with UID 'user123' creates a file under their user ID.
     * @allow (get) - User with UID 'user123' reads a file under their user ID.
     * @allow (update) - User with UID 'user123' updates a file under their user ID.
     * @allow (delete) - User with UID 'user123' deletes a file under their user ID.
     * @deny (create) - User with UID 'user456' attempts to create a file under user ID 'user123'.
     * @deny (get) - User with UID 'user456' attempts to read a file under user ID 'user123'.
     * @principle Enforces document ownership for writes and restricts access to a user's own files.
     */
    match /users/{userId}/files/{fileId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}