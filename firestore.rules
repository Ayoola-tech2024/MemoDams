/**
 * @fileoverview Firestore Security Rules for MemoDams application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. Each user can only
 * access their own data, including user profiles, notes, and files.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data.
 * - /users/{userId}/notes/{noteId}: Stores notes created by the user.
 * - /users/{userId}/files/{fileId}: Stores files uploaded by the user.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profiles.
 * - Users can only create, read, update, and delete their own notes and files.
 * - Listing of notes and files is restricted to the owner.
 *
 * Denormalization for Authorization:
 *  - The `userId` is embedded in the path for notes and files, and is checked against `request.auth.uid` to authorize access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own profile data.
     * @path /users/{userId}
     * @allow (get, update, delete) User with matching UID can access.
     * @allow (create) User with matching UID can create.
     * @deny (get, update, delete) User with non-matching UID attempts to access.
     * @deny (create) User with non-matching UID attempts to create.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows users to create, read, update, and delete their own notes.
     * @path /users/{userId}/notes/{noteId}
     * @allow (create, get, update, delete) User with matching UID can access.
     * @deny (create, get, update, delete) User with non-matching UID attempts to access.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/notes/{noteId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows users to create, read, update, and delete their own files.
     * @path /users/{userId}/files/{fileId}
     * @allow (create, get, update, delete) User with matching UID can access.
     * @deny (create, get, update, delete) User with non-matching UID attempts to access.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/files/{fileId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}