rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    /**
     * @description This ruleset enforces a strict user-ownership model for user-related data,
     *              and shared access for conversations. Users can only read and write their own
     *              data (notes, tags, files), while conversations are accessible to participants.
     * @dataStructure
     *   - /users/{userId}: User profiles.
     *   - /users/{userId}/notes/{noteId}: Notes created by a specific user.
     *   - /users/{userId}/tags/{tagId}: Tags created by a specific user.
     *   - /users/{userId}/files/{fileId}: Files uploaded by a specific user.
     *   - /conversations/{conversationId}: Conversations between users.
     *   - /conversations/{conversationId}/messages/{messageId}: Messages within a conversation.
     * @keySecurityDecisions
     *   - Users can only access their own user document.
     *   - Users can only access notes, tags, and files under their own user ID.
     *   - Conversations are accessible to all participants.
     *   - Messages within a conversation are accessible to all participants.
     *   - Listing users is disallowed.
     * @denormalizationForAuthorization
     *   - Conversations store a list of `participantIds` to easily check access.
     */

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    function isParticipant(participantIds) {
      return isSignedIn() && participantIds.hasAny([request.auth.uid]);
    }

    /**
     * @description Controls access to user profiles. Only the authenticated user can read and write their own profile.
     * @path /users/{userId}
     * @allow (get) User with ID 'user123' can read their own profile.
     *        Request: auth.uid = 'user123'
     * @allow (create) User with ID 'user123' can create their own profile.
     *        Request: auth.uid = 'user123', request.resource.data.id = 'user123'
     * @allow (update) User with ID 'user123' can update their own profile.
     *        Request: auth.uid = 'user123', resource.data.id = 'user123'
     * @allow (delete) User with ID 'user123' can delete their own profile.
     *        Request: auth.uid = 'user123', resource.data.id = 'user123'
     * @deny (get) User with ID 'user456' cannot read the profile of user 'user123'.
     *       Request: auth.uid = 'user456'
     * @deny (create) User with ID 'user456' cannot create a profile for user 'user123'.
     *       Request: auth.uid = 'user456', request.resource.data.id = 'user123'
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to notes created by a specific user. Only the owner can read, create, update, and delete their own notes.
     * @path /users/{userId}/notes/{noteId}
     * @allow (get) User with ID 'user123' can read their note.
     *        Request: auth.uid = 'user123'
     * @allow (create) User with ID 'user123' can create a new note.
     *        Request: auth.uid = 'user123', request.resource.data.userId = 'user123'
     * @allow (update) User with ID 'user123' can update their note.
     *        Request: auth.uid = 'user123', resource.data.userId = 'user123'
     * @allow (delete) User with ID 'user123' can delete their note.
     *        Request: auth.uid = 'user123', resource.data.userId = 'user123'
     * @deny (get) User with ID 'user456' cannot read a note of user 'user123'.
     *       Request: auth.uid = 'user456'
     * @deny (create) User with ID 'user456' cannot create a note for user 'user123'.
     *       Request: auth.uid = 'user456', request.resource.data.userId = 'user123'
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/notes/{noteId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to tags created by a specific user. Only the owner can read, create, update, and delete their own tags.
     * @path /users/{userId}/tags/{tagId}
     * @allow (get) User with ID 'user123' can read their tag.
     *        Request: auth.uid = 'user123'
     * @allow (create) User with ID 'user123' can create a new tag.
     *        Request: auth.uid = 'user123', request.resource.data.userId = 'user123'
     * @allow (update) User with ID 'user123' can update their tag.
     *        Request: auth.uid = 'user123', resource.data.userId = 'user123'
     * @allow (delete) User with ID 'user123' can delete their tag.
     *        Request: auth.uid = 'user123', resource.data.userId = 'user123'
     * @deny (get) User with ID 'user456' cannot read a tag of user 'user123'.
     *       Request: auth.uid = 'user456'
     * @deny (create) User with ID 'user456' cannot create a tag for user 'user123'.
     *       Request: auth.uid = 'user456', request.resource.data.userId = 'user123'
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/tags/{tagId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to files uploaded by a specific user. Only the owner can read, create, update, and delete their own files.
     * @path /users/{userId}/files/{fileId}
     * @allow (get) User with ID 'user123' can read their file.
     *        Request: auth.uid = 'user123'
     * @allow (create) User with ID 'user123' can create a new file.
     *        Request: auth.uid = 'user123', request.resource.data.userId = 'user123'
     * @allow (update) User with ID 'user123' can update their file.
     *        Request: auth.uid = 'user123', resource.data.userId = 'user123'
     * @allow (delete) User with ID 'user123' can delete their file.
     *        Request: auth.uid = 'user123', resource.data.userId = 'user123'
     * @deny (get) User with ID 'user456' cannot read a file of user 'user123'.
     *       Request: auth.uid = 'user456'
     * @deny (create) User with ID 'user456' cannot create a file for user 'user123'.
     *       Request: auth.uid = 'user456', request.resource.data.userId = 'user123'
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/files/{fileId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to conversations. Participants can read and write to the conversation.
     * @path /conversations/{conversationId}
     * @allow (get) User with ID 'user123' can read the conversation if they are a participant.
     *        Request: auth.uid = 'user123', resource.data.participantIds contains 'user123'
     * @allow (create) User with ID 'user123' can create a conversation if they are a participant.
     *        Request: auth.uid = 'user123', request.resource.data.participantIds contains 'user123'
     * @allow (update) User with ID 'user123' can update the conversation if they are a participant.
     *        Request: auth.uid = 'user123', resource.data.participantIds contains 'user123'
     * @allow (delete) User with ID 'user123' can delete the conversation if they are a participant.
     *        Request: auth.uid = 'user123', resource.data.participantIds contains 'user123'
     * @deny (get) User with ID 'user456' cannot read the conversation if they are not a participant.
     *       Request: auth.uid = 'user456', resource.data.participantIds does not contain 'user456'
     * @principle Enforces shared access based on the 'participantIds' array.
     */
    match /conversations/{conversationId} {
      allow get: if isParticipant(resource.data.participantIds);
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.participantIds.hasAny([request.auth.uid]);
      allow update: if isParticipant(resource.data.participantIds) && resource != null;
      allow delete: if isParticipant(resource.data.participantIds) && resource != null;
    }

    /**
     * @description Controls access to messages within a conversation. Participants of the conversation can read and write messages.
     * @path /conversations/{conversationId}/messages/{messageId}
     * @allow (get) User with ID 'user123' can read a message if they are a participant in the conversation.
     *        Request: auth.uid = 'user123', get(/databases/$(database)/documents/conversations/$(conversationId)).data.participantIds contains 'user123'
     * @allow (create) User with ID 'user123' can create a message if they are a participant in the conversation.
     *        Request: auth.uid = 'user123', get(/databases/$(database)/documents/conversations/$(conversationId)).data.participantIds contains 'user123'
     * @allow (update) User with ID 'user123' can update a message if they are a participant in the conversation.
     *        Request: auth.uid = 'user123', get(/databases/$(database)/documents/conversations/$(conversationId)).data.participantIds contains 'user123'
     * @allow (delete) User with ID 'user123' can delete a message if they are a participant in the conversation.
     *        Request: auth.uid = 'user123', get(/databases/$(database)/documents/conversations/$(conversationId)).data.participantIds contains 'user123'
     * @deny (get) User with ID 'user456' cannot read a message if they are not a participant in the conversation.
     *       Request: auth.uid = 'user456', get(/databases/$(database)/documents/conversations/$(conversationId)).data.participantIds does not contain 'user456'
     * @principle Enforces shared access based on the 'participantIds' array in the parent conversation.
     */
    match /conversations/{conversationId}/messages/{messageId} {
      allow get: if isParticipant(get(/databases/$(database)/documents/conversations/$(conversationId)).data.participantIds);
      allow list: if isParticipant(get(/databases/$(database)/documents/conversations/$(conversationId)).data.participantIds);
      allow create: if isSignedIn() && get(/databases/$(database)/documents/conversations/$(conversationId)).data.participantIds.hasAny([request.auth.uid]);
      allow update: if isSignedIn() && get(/databases/$(database)/documents/conversations/$(conversationId)).data.participantIds.hasAny([request.auth.uid]) && resource != null;
      allow delete: if isSignedIn() && get(/databases/$(database)/documents/conversations/$(conversationId)).data.participantIds.hasAny([request.auth.uid]) && resource != null;
    }

    /**
     * @description Controls listing of conversations for a specific user.
     * @path /users/{userId}/conversations
     * @allow (list) User with ID 'user123' can list conversations under their ID.
     *        Request: auth.uid = 'user123'
     * @deny (list) User with ID 'user456' cannot list conversations under the ID of user 'user123'.
     *       Request: auth.uid = 'user456'
     * @principle Enforces document ownership for reads.
     */
    match /users/{userId}/conversations {
          allow list: if isOwner(userId);
          allow get: if false;
          allow create: if false;
          allow update: if false;
          allow delete: if false;
    }
  }
}