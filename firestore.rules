rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their own profile if the userId matches their auth UID.
     * @allow (get, list, update, delete) - Authenticated user can get, list, update, or delete their profile if the userId matches their auth UID.
     * @deny (create) - An unauthenticated user cannot create a profile.
     * @deny (update, delete) - A different authenticated user cannot update or delete another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to notes created by a specific user.
     * @path /users/{userId}/notes/{noteId}
     * @allow (create) - Authenticated user can create a note under their own userId.
     * @allow (get, list, update, delete) - Authenticated user can get, list, update, or delete a note under their own userId.
     * @deny (create) - An unauthenticated user cannot create a note.
     * @deny (update, delete) - A different authenticated user cannot update or delete another user's note.
     * @principle Enforces document ownership for all operations on notes.
     */
    match /users/{userId}/notes/{noteId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

       function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to tags created by a specific user.
     * @path /users/{userId}/tags/{tagId}
     * @allow (create) - Authenticated user can create a tag under their own userId.
     * @allow (get, list, update, delete) - Authenticated user can get, list, update, or delete a tag under their own userId.
     * @deny (create) - An unauthenticated user cannot create a tag.
     * @deny (update, delete) - A different authenticated user cannot update or delete another user's tag.
     * @principle Enforces document ownership for all operations on tags.
     */
    match /users/{userId}/tags/{tagId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to files uploaded by a specific user.
     * @path /users/{userId}/files/{fileId}
     * @allow (create) - Authenticated user can create a file under their own userId.
     * @allow (get, list, update, delete) - Authenticated user can get, list, update, or delete a file under their own userId.
     * @deny (create) - An unauthenticated user cannot create a file.
     * @deny (update, delete) - A different authenticated user cannot update or delete another user's file.
     * @principle Enforces document ownership for all operations on files.
     */
    match /users/{userId}/files/{fileId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }
  }
}