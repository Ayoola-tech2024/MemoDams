rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information. Only the authenticated user can read or write their own profile.
     * @path /users/{userId}
     * @allow (get) User with UID 'tVqa3yY8FcPBW0jds1TLZ1WKYO53' can read their own profile.
     * @allow (create) User with UID 'tVqa3yY8FcPBW0jds1TLZ1WKYO53' can create their own profile.
     * @allow (update) User with UID 'tVqa3yY8FcPBW0jds1TLZ1WKYO53' can update their own profile.
     * @allow (delete) User with UID 'tVqa3yY8FcPBW0jds1TLZ1WKYO53' can delete their own profile.
     * @deny (get) User with UID 'otherUserId' cannot read a different user's profile.
     * @deny (create) User with UID 'otherUserId' cannot create a profile with a different user ID.
     * @deny (update) User with UID 'otherUserId' cannot update a different user's profile.
     * @deny (delete) User with UID 'otherUserId' cannot delete a different user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // isSignedIn() helper function centralizes the authentication check.
      function isSignedIn() {
        return request.auth != null;
      }

      // isOwner(userId) helper function checks if the request is made by the owner of the document.
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // Listing users is not permitted.
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to notes created by a specific user. Only the authenticated user can read, create, update, or delete their own notes.
     * @path /users/{userId}/notes/{noteId}
     * @allow (get) User with UID 'tVqa3yY8FcPBW0jds1TLZ1WKYO53' can read their own note.
     * @allow (list) User with UID 'tVqa3yY8FcPBW0jds1TLZ1WKYO53' can list their own notes.
     * @allow (create) User with UID 'tVqa3yY8FcPBW0jds1TLZ1WKYO53' can create a note under their user ID.
     * @allow (update) User with UID 'tVqa3yY8FcPBW0jds1TLZ1WKYO53' can update their own note.
     * @allow (delete) User with UID 'tVqa3yY8FcPBW0jds1TLZ1WKYO53' can delete their own note.
     * @deny (get) User with UID 'otherUserId' cannot read a note belonging to a different user.
     * @deny (list) User with UID 'otherUserId' cannot list notes belonging to a different user.
     * @deny (create) User with UID 'otherUserId' cannot create a note under a different user ID.
     * @deny (update) User with UID 'otherUserId' cannot update a note belonging to a different user.
     * @deny (delete) User with UID 'otherUserId' cannot delete a note belonging to a different user.
     * @principle Restricts access to a user's own notes.
     */
    match /users/{userId}/notes/{noteId} {
        // isOwner(userId) helper function checks if the request is made by the owner of the document.
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // isExistingOwner(userId) helper function checks if the request is made by the existing owner of the document.
      function isExistingOwner(userId) {
          return isOwner(userId) && resource.data != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) ;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to tags created by a specific user. Only the authenticated user can read, create, update, or delete their own tags.
     * @path /users/{userId}/tags/{tagId}
     * @allow (get) User with UID 'tVqa3yY8FcPBW0jds1TLZ1WKYO53' can read their own tag.
     * @allow (list) User with UID 'tVqa3yY8FcPBW0jds1TLZ1WKYO53' can list their own tags.
     * @allow (create) User with UID 'tVqa3yY8FcPBW0jds1TLZ1WKYO53' can create a tag under their user ID.
     * @allow (update) User with UID 'tVqa3yY8FcPBW0jds1TLZ1WKYO53' can update their own tag.
     * @allow (delete) User with UID 'tVqa3yY8FcPBW0jds1TLZ1WKYO53' can delete their own tag.
     * @deny (get) User with UID 'otherUserId' cannot read a tag belonging to a different user.
     * @deny (list) User with UID 'otherUserId' cannot list tags belonging to a different user.
     * @deny (create) User with UID 'otherUserId' cannot create a tag under a different user ID.
     * @deny (update) User with UID 'otherUserId' cannot update a tag belonging to a different user.
     * @deny (delete) User with UID 'otherUserId' cannot delete a tag belonging to a different user.
     * @principle Restricts access to a user's own tags.
     */
    match /users/{userId}/tags/{tagId} {
        // isOwner(userId) helper function checks if the request is made by the owner of the document.
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // isExistingOwner(userId) helper function checks if the request is made by the existing owner of the document.
      function isExistingOwner(userId) {
          return isOwner(userId) && resource.data != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to files uploaded by a specific user. Only the authenticated user can read, create, update, or delete their own files.
     * @path /users/{userId}/files/{fileId}
     * @allow (get) User with UID 'tVqa3yY8FcPBW0jds1TLZ1WKYO53' can read their own file.
     * @allow (list) User with UID 'tVqa3yY8FcPBW0jds1TLZ1WKYO53' can list their own files.
     * @allow (create) User with UID 'tVqa3yY8FcPBW0jds1TLZ1WKYO53' can create a file under their user ID.
     * @allow (update) User with UID 'tVqa3yY8FcPBW0jds1TLZ1WKYO53' can update their own file.
     * @allow (delete) User with UID 'tVqa3yY8FcPBW0jds1TLZ1WKYO53' can delete their own file.
     * @deny (get) User with UID 'otherUserId' cannot read a file belonging to a different user.
     * @deny (list) User with UID 'otherUserId' cannot list files belonging to a different user.
     * @deny (create) User with UID 'otherUserId' cannot create a file under a different user ID.
     * @deny (update) User with UID 'otherUserId' cannot update a file belonging to a different user.
     * @deny (delete) User with UID 'otherUserId' cannot delete a file belonging to a different user.
     * @principle Restricts access to a user's own files.
     */
    match /users/{userId}/files/{fileId} {
       // isOwner(userId) helper function checks if the request is made by the owner of the document.
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // isExistingOwner(userId) helper function checks if the request is made by the existing owner of the document.
      function isExistingOwner(userId) {
          return isOwner(userId) && resource.data != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) ;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}