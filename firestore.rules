/**
 * @fileoverview Firestore Security Rules for MemoDams application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model, ensuring that users can only access their own data.
 *
 * Data Structure:
 * All user-specific data (notes and files) is nested under /users/{userId}.
 *
 * Key Security Decisions:
 * - Users can only list collections of notes and files under their own user ID.
 * - The rules explicitly deny any listing of the top-level `/conversations` collection.
 * - Data shape validation is relaxed to allow for prototyping, but ownership is strictly enforced.
 *
 * Denormalization for Authorization:
 * The rules rely on the path-based user ID to authorize access, avoiding the need for denormalized ownership fields within the documents themselves.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by a signed-in user.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided user ID.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of an existing document.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for the /users/{userId} collection.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their profile.
     * @deny (create) User with ID 'user456' cannot create a profile with ID 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/notes/{noteId} collection.
     * @path /users/{userId}/notes/{noteId}
     * @allow (create) User with ID 'user123' can create a note under their profile.
     * @deny (create) User with ID 'user456' cannot create a note under user123's profile.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/notes/{noteId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/files/{fileId} collection.
     * @path /users/{userId}/files/{fileId}
     * @allow (create) User with ID 'user123' can create a file under their profile.
     * @deny (create) User with ID 'user456' cannot create a file under user123's profile.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/files/{fileId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
    
        /**
     * @description Rules for the /conversations collection (Deny listing).
     * @path /conversations
     * @deny (list)  Denies listing all the converstations for all users.
     * @principle Prevents unauthorized listing of the conversations collection.
     */
    match /conversations {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}