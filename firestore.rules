/**
 * @file This ruleset enforces a strict user-ownership model for all data.
 * All data is nested under /users/{userId}, ensuring that each user can only access their own data.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information. The userId MUST match the authenticated user's UID.
 * - /users/{userId}/notes/{noteId}: Stores notes created by a specific user.
 * - /users/{userId}/tags/{tagId}: Stores tags created by a specific user.
 * - /users/{userId}/files/{fileId}: Stores files uploaded by a specific user.
 *
 * Key Security Decisions:
 * - User listing is implicitly disallowed.
 * - All write operations are protected by ownership checks.
 *
 * Denormalization for Authorization:
 * - The userId is encoded in the path, avoiding the need to read user documents for authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects the user profile document. Only the user themselves can read or write their profile.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' creates their profile document.
     * @allow (get) User with ID 'user123' reads their profile document.
     * @allow (update) User with ID 'user123' updates their profile document.
     * @allow (delete) User with ID 'user123' deletes their profile document.
     * @deny (create) User with ID 'user123' attempts to create a profile for user 'user456'.
     * @deny (get) User with ID 'user123' attempts to read the profile of user 'user456'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && resource.data.id == request.resource.data.id;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Protects notes created by a user. Only the user can create, read, update, or delete their own notes.
     * @path /users/{userId}/notes/{noteId}
     * @allow (create) User with ID 'user123' creates a new note under their user ID.
     * @allow (get) User with ID 'user123' reads a note under their user ID.
     * @allow (update) User with ID 'user123' updates a note under their user ID.
     * @allow (delete) User with ID 'user123' deletes a note under their user ID.
     * @deny (create) User with ID 'user123' attempts to create a note under user ID 'user456'.
     * @deny (get) User with ID 'user123' attempts to read a note under user ID 'user456'.
     * @principle Enforces document ownership for all operations within the notes subcollection.
     */
    match /users/{userId}/notes/{noteId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Protects tags created by a user. Only the user can create, read, update, or delete their own tags.
     * @path /users/{userId}/tags/{tagId}
     * @allow (create) User with ID 'user123' creates a new tag under their user ID.
     * @allow (get) User with ID 'user123' reads a tag under their user ID.
     * @allow (update) User with ID 'user123' updates a tag under their user ID.
     * @allow (delete) User with ID 'user123' deletes a tag under their user ID.
     * @deny (create) User with ID 'user123' attempts to create a tag under user ID 'user456'.
     * @deny (get) User with ID 'user123' attempts to read a tag under user ID 'user456'.
     * @principle Enforces document ownership for all operations within the tags subcollection.
     */
    match /users/{userId}/tags/{tagId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Protects files uploaded by a user. Only the user can create, read, update, or delete their own files.
     * @path /users/{userId}/files/{fileId}
     * @allow (create) User with ID 'user123' creates a new file under their user ID.
     * @allow (get) User with ID 'user123' reads a file under their user ID.
     * @allow (update) User with ID 'user123' updates a file under their user ID.
     * @allow (delete) User with ID 'user123' deletes a file under their user ID.
     * @deny (create) User with ID 'user123' attempts to create a file under user ID 'user456'.
     * @deny (get) User with ID 'user123' attempts to read a file under user ID 'user456'.
     * @principle Enforces document ownership for all operations within the files subcollection.
     */
    match /users/{userId}/files/{fileId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }
  }
}