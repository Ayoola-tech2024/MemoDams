/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for all data. Each user has exclusive access to their profile, notes, tags, and files.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information. The userId must match the authenticated user's UID.
 * - /users/{userId}/notes/{noteId}: Stores notes created by a specific user.
 * - /users/{userId}/tags/{tagId}: Stores tags created by a specific user.
 * - /users/{userId}/files/{fileId}: Stores files uploaded by a specific user.
 *
 * Key Security Decisions:
 * - Users can only access their own data. No cross-user data access is allowed.
 * - List operations are restricted to the owner of the data.
 * - Data validation is limited to ownership checks and relational integrity (userId).
 *
 * Denormalization for Authorization:
 * - The userId is encoded in the path for all user-owned data, eliminating the need to read the document to determine ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user_abc' can create their profile document.
     * @allow (get) - User with UID 'user_abc' can read their profile document.
     * @allow (update) - User with UID 'user_abc' can update their profile document.
     * @allow (delete) - User with UID 'user_abc' can delete their profile document.
     * @deny (create) - User with UID 'user_xyz' cannot create a profile document for 'user_abc'.
     * @deny (update) - User with UID 'user_xyz' cannot update the profile document for 'user_abc'.
     * @deny (delete) - User with UID 'user_xyz' cannot delete the profile document for 'user_abc'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // Function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Function to check if the requested user ID matches the authenticated user's ID
      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      // Function to check if the user is the owner and the document exists
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // User listing is not permitted.

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to notes created by a specific user.
     * @path /users/{userId}/notes/{noteId}
     * @allow (create) - User with UID 'user_abc' can create a note under their user ID.
     * @allow (get) - User with UID 'user_abc' can read a note under their user ID.
     * @allow (update) - User with UID 'user_abc' can update a note under their user ID.
     * @allow (delete) - User with UID 'user_abc' can delete a note under their user ID.
     * @deny (create) - User with UID 'user_xyz' cannot create a note under 'user_abc'.
     * @deny (get) - User with UID 'user_xyz' cannot read a note under 'user_abc'.
     * @deny (update) - User with UID 'user_xyz' cannot update a note under 'user_abc'.
     * @deny (delete) - User with UID 'user_xyz' cannot delete a note under 'user_abc'.
     * @principle Enforces document ownership for all operations on notes.
     */
    match /users/{userId}/notes/{noteId} {
      // Function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Function to check if the requested user ID matches the authenticated user's ID
      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      // Function to check if the user is the owner and the document exists
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to tags created by a specific user.
     * @path /users/{userId}/tags/{tagId}
     * @allow (create) - User with UID 'user_abc' can create a tag under their user ID.
     * @allow (get) - User with UID 'user_abc' can read a tag under their user ID.
     * @allow (update) - User with UID 'user_abc' can update a tag under their user ID.
     * @allow (delete) - User with UID 'user_abc' can delete a tag under their user ID.
     * @deny (create) - User with UID 'user_xyz' cannot create a tag under 'user_abc'.
     * @deny (get) - User with UID 'user_xyz' cannot read a tag under 'user_abc'.
     * @deny (update) - User with UID 'user_xyz' cannot update a tag under 'user_abc'.
     * @deny (delete) - User with UID 'user_xyz' cannot delete a tag under 'user_abc'.
     * @principle Enforces document ownership for all operations on tags.
     */
    match /users/{userId}/tags/{tagId} {
      // Function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Function to check if the requested user ID matches the authenticated user's ID
      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      // Function to check if the user is the owner and the document exists
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to files uploaded by a specific user.
     * @path /users/{userId}/files/{fileId}
     * @allow (create) - User with UID 'user_abc' can create a file entry under their user ID.
     * @allow (get) - User with UID 'user_abc' can read a file entry under their user ID.
     * @allow (update) - User with UID 'user_abc' can update a file entry under their user ID.
     * @allow (delete) - User with UID 'user_abc' can delete a file entry under their user ID.
     * @deny (create) - User with UID 'user_xyz' cannot create a file entry under 'user_abc'.
     * @deny (get) - User with UID 'user_xyz' cannot read a file entry under 'user_abc'.
     * @deny (update) - User with UID 'user_xyz' cannot update a file entry under 'user_abc'.
     * @deny (delete) - User with UID 'user_xyz' cannot delete a file entry under 'user_abc'.
     * @principle Enforces document ownership for all operations on files.
     */
    match /users/{userId}/files/{fileId} {
      // Function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Function to check if the requested user ID matches the authenticated user's ID
      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      // Function to check if the user is the owner and the document exists
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}