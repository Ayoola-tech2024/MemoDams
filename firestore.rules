/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for personal data (notes, tags, files),
 * and shared access via explicit membership for conversations. It prioritizes security and data privacy,
 * while allowing for flexible data structures in the prototyping phase.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, accessible only to the owning user.
 * - /users/{userId}/notes/{noteId}: Notes owned by a specific user, accessible only to that user.
 * - /users/{userId}/tags/{tagId}: Tags owned by a specific user, accessible only to that user.
 * - /users/{userId}/files/{fileId}: Files owned by a specific user, accessible only to that user.
 * - /conversations/{conversationId}: Conversations between users, accessible only to participants.
 * - /conversations/{conversationId}/messages/{messageId}: Messages within a conversation, accessible only to conversation participants.
 *
 * Key Security Decisions:
 * - User listing is enabled to allow searching for users on the platform, as requested.
 * - Strict ownership is enforced for user-related data (notes, tags, files).
 * - Conversations are secured using a shared access model based on the `participantIds` array.
 * - Data validation is limited to ownership checks and relationship integrity, focusing on security-critical aspects.
 *
 * Denormalization for Authorization:
 * - Conversations store an array of `participantIds` to enable efficient authorization checks without additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles, allowing read access for all, and owner-only write access.
     * @path /users/{userId}
     * @allow (get, list): Any user can fetch a user profile. This is to allow searching for users on the platform.
     * @allow (create): User 'abc' can create their profile.
     * @allow (update, delete): User 'abc' can update/delete their own profile.
     * @deny (create): User 'def' cannot create a profile for user 'abc'.
     * @deny (update, delete): User 'def' cannot update/delete user 'abc's profile.
     * @principle Allows any user to read user profiles for finding other users, enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update, delete: if isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Secure notes, restricting access to the owning user.
     * @path /users/{userId}/notes/{noteId}
     * @allow (create): User 'abc' can create a note in their own profile.
     * @allow (get, list, update, delete): User 'abc' can read, list, update, and delete their own notes.
     * @deny (create): User 'def' cannot create a note in user 'abc's profile.
     * @deny (get, list, update, delete): User 'def' cannot read, list, update, or delete user 'abc's notes.
     * @principle Restricts access to a user's own data tree, enforces document ownership for writes.
     */
    match /users/{userId}/notes/{noteId} {
      allow get, list, create, update, delete: if isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Secure tags, restricting access to the owning user.
     * @path /users/{userId}/tags/{tagId}
     * @allow (create): User 'abc' can create a tag in their own profile.
     * @allow (get, list, update, delete): User 'abc' can read, list, update, and delete their own tags.
     * @deny (create): User 'def' cannot create a tag in user 'abc's profile.
     * @deny (get, list, update, delete): User 'def' cannot read, list, update, or delete user 'abc's tags.
     * @principle Restricts access to a user's own data tree, enforces document ownership for writes.
     */
    match /users/{userId}/tags/{tagId} {
      allow get, list, create, update, delete: if isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Secure files, restricting access to the owning user.
     * @path /users/{userId}/files/{fileId}
     * @allow (create): User 'abc' can create a file in their own profile.
     * @allow (get, list, update, delete): User 'abc' can read, list, update, and delete their own files.
     * @deny (create): User 'def' cannot create a file in user 'abc's profile.
     * @deny (get, list, update, delete): User 'def' cannot read, list, update, or delete user 'abc's files.
     * @principle Restricts access to a user's own data tree, enforces document ownership for writes.
     */
    match /users/{userId}/files/{fileId} {
      allow get, list, create, update, delete: if isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Secure conversations, restricting access to participants.
     * @path /conversations/{conversationId}
     * @allow (create): Any signed-in user can create a conversation.
     * @allow (get, list, update, delete): Only participants can read, list, update, and delete the conversation.
     * @deny (get, list, update, delete): A non-participant cannot read, list, update, or delete the conversation.
     * @principle Enforces shared access model based on participant list.
     */
    match /conversations/{conversationId} {
      allow get, list, update, delete: if isSignedIn() && isParticipant(resource.data.participantIds);
      allow create: if isSignedIn();
    }

    /**
     * @description Secure messages within conversations, restricting access to participants.
     * @path /conversations/{conversationId}/messages/{messageId}
     * @allow (create): Only participants can create messages in the conversation.
     * @allow (get, list): Only participants can read and list messages in the conversation.
     * @allow (update, delete): Only the message sender can update or delete the message.
     * @deny (create): A non-participant cannot create messages.
     * @deny (get, list): A non-participant cannot read or list messages.
     * @deny (update, delete): A non-sender cannot update or delete a message.
     * @principle Enforces shared access model based on participant list, enforces message ownership for updates/deletes.
     */
    match /conversations/{conversationId}/messages/{messageId} {
      allow get, list: if isSignedIn() && isParticipant(get(/databases/$(database)/documents/conversations/$(conversationId)).data.participantIds);
      allow create: if isSignedIn() && isParticipant(get(/databases/$(database)/documents/conversations/$(conversationId)).data.participantIds);
      allow update, delete: if isSignedIn() && resource.data.senderId == request.auth.uid && isParticipant(get(/databases/$(database)/documents/conversations/$(conversationId)).data.participantIds);
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isParticipant(participantIds) {
      return participantIds.hasAny([request.auth.uid]);
    }
  }
}