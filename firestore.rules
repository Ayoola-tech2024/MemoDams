/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model, where each user can only access their own data.
 *
 * Data Structure:
 * All data is nested under /users/{userId}, ensuring data isolation.
 * - /users/{userId}: User profile information, where {userId} MUST match the Firebase Auth UID.
 * - /users/{userId}/notes/{noteId}: Notes created by the user.
 * - /users/{userId}/tags/{tagId}: Tags created by the user.
 * - /users/{userId}/files/{fileId}: Files uploaded by the user.
 *
 * Key Security Decisions:
 * - Users can only list documents within their own user ID space. Listing other users is disallowed.
 * - Data consistency between the path and document data is enforced on create and update.
 * - These rules prioritize authorization and relational integrity, while relaxing data shape validation for prototyping.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by a signed-in user.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the request is made by the owner of the resource.
     * @param {string} userId The user ID to compare against the request's auth UID.
     * @returns {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the request is made by the owner of the resource, and that the resource exists.
     * @param {string} userId The user ID to compare against the request's auth UID.
     * @returns {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for user profile documents.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their profile document.
     * @allow (get) User with UID 'user123' can read their profile document.
     * @allow (update) User with UID 'user123' can update their profile document.
     * @allow (delete) User with UID 'user123' can delete their profile document.
     * @deny (create) User with UID 'user456' cannot create a profile document for 'user123'.
     * @deny (update) User with UID 'user456' cannot update the profile document for 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // Allow a user to create their own user document if the userId matches their auth.uid
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow get: if isOwner(userId);
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
      allow list: if false;
    }

    /**
     * @description Rules for notes under a user's profile.
     * @path /users/{userId}/notes/{noteId}
     * @allow (create) User with UID 'user123' can create a note under their profile.
     * @allow (get) User with UID 'user123' can read a note under their profile.
     * @allow (update) User with UID 'user123' can update a note under their profile.
     * @allow (delete) User with UID 'user123' can delete a note under their profile.
     * @deny (create) User with UID 'user456' cannot create a note under 'user123' profile.
     * @deny (update) User with UID 'user456' cannot update a note under 'user123' profile.
     * @principle Enforces document ownership and relational integrity for all operations.
     */
    match /users/{userId}/notes/{noteId} {
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow get: if isOwner(userId);
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
      allow list: if isOwner(userId);
    }

    /**
     * @description Rules for tags under a user's profile.
     * @path /users/{userId}/tags/{tagId}
     * @allow (create) User with UID 'user123' can create a tag under their profile.
     * @allow (get) User with UID 'user123' can read a tag under their profile.
     * @allow (update) User with UID 'user123' can update a tag under their profile.
     * @allow (delete) User with UID 'user123' can delete a tag under their profile.
     * @deny (create) User with UID 'user456' cannot create a tag under 'user123' profile.
     * @deny (update) User with UID 'user456' cannot update a tag under 'user123' profile.
     * @principle Enforces document ownership and relational integrity for all operations.
     */
    match /users/{userId}/tags/{tagId} {
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow get: if isOwner(userId);
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
      allow list: if isOwner(userId);
    }

    /**
     * @description Rules for files under a user's profile.
     * @path /users/{userId}/files/{fileId}
     * @allow (create) User with UID 'user123' can create a file under their profile.
     * @allow (get) User with UID 'user123' can read a file under their profile.
     * @allow (update) User with UID 'user123' can update a file under their profile.
     * @allow (delete) User with UID 'user123' can delete a file under their profile.
     * @deny (create) User with UID 'user456' cannot create a file under 'user123' profile.
     * @deny (update) User with UID 'user456' cannot update a file under 'user123' profile.
     * @principle Enforces document ownership and relational integrity for all operations.
     */
    match /users/{userId}/files/{fileId} {
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow get: if isOwner(userId);
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
      allow list: if isOwner(userId);
    }
  }
}